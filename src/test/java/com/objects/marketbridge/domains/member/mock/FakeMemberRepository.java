package com.objects.marketbridge.domains.member.mock;

import com.objects.marketbridge.domains.member.domain.Member;
import com.objects.marketbridge.domains.member.dto.GetMemberInfoWithPassword;
import com.objects.marketbridge.domains.member.dto.MemberEmail;
import com.objects.marketbridge.domains.member.dto.MemberId;
import com.objects.marketbridge.domains.member.service.port.MemberRepository;
import jakarta.persistence.EntityNotFoundException;
import lombok.extern.slf4j.Slf4j;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

@Slf4j
public class FakeMemberRepository implements MemberRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    List<Member> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public boolean existsByEmail(String email) {
        return data.stream().anyMatch(item -> item.getEmail().equals(email));
    }

    @Override
    public Member findByEmail(String email) {
        return (data.stream()
                .filter(item -> item.getEmail().equals(email)).findAny())
                .orElseThrow(EntityNotFoundException::new);

    }

    @Override
    public Optional<Member> findOptionalByEmail(String email) {
        return (data.stream()
                .filter(item -> item.getEmail().equals(email)).findAny());
    }

    @Override
    public Member findById(Long id) {
        return null;
    }

    @Override
    public Member findByIdWithAddresses(Long id) {
        return null;
    }

    @Override
    public void deleteAllInBatch() {

    }

    @Override
    public GetMemberInfoWithPassword getMemberInfoById(Long memberId) {
        return null;
    }

    @Override
    public MemberEmail getEmailById(Long memberId) {
        return null;
    }

    @Override
    public MemberId findIdByNameAndEmail(String name, String email) {
        return null;
    }

    @Override
    public MemberEmail findEmailByNameAndPhoneNo(String name, String phoneNo) {
        return null;
    }

    @Override
    public List<Member> saveAll(List<Member> members) {
        return null;
    }

    @Override
    public Member save(Member member) {
        if (member.getId() == null || member.getId() == 0) {
            Member newMember = Member.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .email(member.getEmail())
                    .name(member.getName())
                    .password(member.getPassword())
                    .phoneNo(member.getPhoneNo())
                    .isAgree(member.getIsAgree())
                    .isAlert(member.getIsAlert())
                    .membership(member.getMembership())
                    .build();
            data.add(newMember);
            return newMember;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), member.getId()));
            data.add(member);
            return member;
        }
    }
}
